
import java.awt.Desktop;
import java.awt.Toolkit;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author PC PLANET
 */
public class hill extends javax.swing.JFrame {

    final URI uri;
    /**
     * Creates new form hill
     * @throws java.net.URISyntaxException
     */
    public hill() throws URISyntaxException {
        this.uri = new URI("http://massey.limfinity.com/207/hillcipher.php");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel4.setText("<HTML>Click the <FONT color=\"#000099\"><U>link for refrence</U></FONT>");

        setTitle("Hill Cipher");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Icons2/logo1.jpg")));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setText("Hill Cipher");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("\t\tIn classical cryptography, the Hill cipher is a polygraphic substitution cipher based on linear algebra. Invented by Lester S. Hill in 1929, it was the first polygraphic cipher in which it was practical (though barely) to operate on more than three symbol at once. The following discussion assumes an elementary knowledge of matrices.\t\t\n\t\tEach letter is represented by a number modulo 26(It can also be done by modulo 41 which we have used).  Often the simple scheme A = 0, B = 1, ..., Z = 25 is used, but this is not an essential feature of the cipher.) To encrypt a message, each block of n letters (considered as an n-component vector) is         multiplied by an invertible n × n matrix, again modulus 26. To decrypt the message, each block is multiplied by the inverse of the matrix     used   for encryption.\n\t\tThe matrix used for encryption is the cipher key, and it should be chosen randomly from the set of invertible      n × n matrices (modulo 26). The cipher can, of course, be adapted to an alphabet with any number of letters; all arithmetic just needs to be   done modulo the number of letters instead of modulo 26.\n\nTable A– Letters and Their Corresponding Positions\n      A  B  C  D  E  F  G  H  I   J    K    L    M   N    O   P     Q    R     S     T     U      V    W    X    Y    Z\n 0   1  2     3  4   5  6  7   8   9  10  11  12  13    14  15  16    17   18   19     20   21     22    23   24   25   26 \n\n1.\tObtain a plaintext message to encode in standard English with no punctuation.\n2.\tCreate an enciphering matrix:\n2.1.\tForm a square 2x2 matrix with nonnegative integers each less than 26.\n2.2.\tCheck that its determinant does NOT factor by 2 or 13.  If this is so, return to Step 2.1.\n3.\tGroup the plaintext into pairs.  If you have an odd number of letters, repeat the last letter.\n4.\tReplace each letter by the number corresponding to its position in the alphabet i.e. A=1, B=2, C=3…Z=0.  See Table A belo\tw for quick reference.\n\n5.\tConvert each pair of letters into plaintext vectors.\n6.\tConvert the plaintext vectors into ciphertext vectors.\n6.1.\tMutiply the enciphering matrix by each plaintext vector.\n6.2.\tReplace each new vector by its residue modulo 26 if possible.\n7.\tConvert each entry in the ciphertext vector into its corresponding position in the alphabet.\n8.\tAlign the letters in a single line without spaces.  The message is now enciphered.\n \tDeciphering a Message: Known Enciphering Matrix\n\nIn order to decipher the matrix, you must know the enciphering matrix used.  All parties with legitimate access to the ciphertext should know the enciphering matrix.\n\n1.\tObtain a plaintext message to encode in standard English with no punctuation.\n2.\tGroup the ciphertext into pairs.\n3.\tReplace each letter by the number corresponding to its position in the alphabet i.e. A=1, B=2, C=3…Z=0.  See Table A, repe\tated below, for quick reference.\n4.\tConvert each pair of letters into ciphertext vectors. \n5.\tFind the inverse of the enciphering matrix.\n5.1.\tFind the determinant of the enciphering matrix.\n5.2.\tFind the determinant’s reciprocal modulo 26.  See Table B below for quick reference.\n5.3.\tMultiply the reciprocal modulo 26 by the enciphering matrix.\n5.4.\tFind the residue modulo 26 of the new matrix.  This is the deciphering matrix.\n6.\tConvert the ciphertext vectors into plaintext vectors.\n6.1.\tMutiply the deciphering matrix by each ciphertext vectector\n6.2.\tReplace each new vector by its residue modulo 26 if possible.\n7.\tConvert each entry in the ciphertext vector into its corresponding position in the alphabet.\n8.\tAlign the letters in a single line without spaces.  \n9.\tUse logic and phonetics to determine individual words.  The message is now deciphered.\n Deciphering a Message: Unknown Enciphering Matrix\nAs stated previously, all parties with legitimate access to the ciphertext should know the enciphering matrix to quickly obtain the plaintext from the enciphered message.  However, intercepted ciphertext can be deciphered without the matrix if a minimum of four letters of ciphertext can be correctly matched to plaintext.\n\n1.\tObtain an intercepted message.\n2.\tDetermine four ciphertext letters for which the plaintext is known.\n\tWe know that the last four ciphertext letters correspond to the word ATOM. \n3.\tCreate corresponding plaintext and ciphertext vectors.\n3.1.\tReplace each letter in the ciphertext and plaintext by the number corresponding to its position in the alphabet i.e. A=1,        \tB=2,C=3…Z=0.  See Table A, repeated below, for quick reference.\n3.2.\tConvert each pair of letters in the ciphertext and plaintext into vectors.\n3.3.\tName the ciphertext vectors c1 and c2 and the plaintext vectors p1 and p2.\n4.\tGroup the ciphertext and plaintext vectors into 2x2 matrices.\n4.1.\tTake the transpose of all vector\n4.2.\tCreate the 2x2 matrix C such that  .\n4.3.\tCreate the 2x2 matrix P such that  .\n 5.\tSolve for the deciphering matrix.\n5.1.\tAugment matrix C to matrix P such that  .\n5.2.\tPerform elementary row operations on   to obtain the 2x2 identity matrix on the left side of the augmented matrix.  The 2x2 m\tatrix formed on the right side of the matrix is the deciphering matrix.\n(1)   \t\t     Form the matrix .\n(2)   \t\t     Add row 2 to row 1.\n(3)   \t\t     Replace row 1 entries by their residues mod 26.\n(4)   \t   \t     Add -17 times the first row to the second.\n(5)   \t\t     Replace row 2 entries by their residues mod 26.\n(6)   \t\t     Multiply row 2 by 11-1 = 19.\n(7)   \t\t     Replace row 2 entries by their residues mod 26.\n(8)   \t     \t     Add -14 times the second row to the first.\n(9)   \t\t     Replace row 1 entries by their residues mod 26.\n6.\t\t     Group the whole ciphertext into pairs.\n7.\t\t     Replace each letter by the number corresponding to its position in the alphabet i.e. A=1, B=2, C=3, etc.  Se                                                      eTable repeateded below, for quick reference.\n8.\t\t     Convert each pair of letters into ciphertext vectors.\n9.\t      \t     Follow Steps 6 through 9 under Deciphering a Message: Known Enciphering Matrix.");
        jScrollPane1.setViewportView(jTextArea1);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons2/hill.jpg"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Table used by us : ");

        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(587, 587, 587))
            .addGroup(layout.createSequentialGroup()
                .addGap(267, 267, 267)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 749, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(493, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(401, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        // TODO add your handling code here:
        if(Desktop.isDesktopSupported()){
            try{
                Desktop.getDesktop().browse(uri);
            }
            catch(IOException e){
                
            }
        }
    }//GEN-LAST:event_jLabel4MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(hill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(hill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(hill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(hill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                
                try {
                    new hill().setVisible(true);
                } catch (URISyntaxException ex) {
                    Logger.getLogger(hill.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
