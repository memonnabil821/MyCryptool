//ORIGINAL FILE

import java.awt.Cursor;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.math.BigInteger;
import java.net.URISyntaxException;
import java.security.SecureRandom;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Nabil
 */
public class mycryptool extends javax.swing.JFrame {
    static String a,b; // for copy cut and paste--------------------------------
    boolean ab=false,bc=false,ac=false,ad=false; // cut copy paste purpose----------------------------------
    boolean cc=false,hc=false,rsa=false,des=false,tr=false,vc=false,rabn=false,rf=false; // selection algo---------------
    static String t1;   //Tree selection----------------------------------------
    static String s1="",s2="";  // input & Output-------------------------------
    static int ky; //Keys----------------------------------------------
    static String key=""; //Character key---------------------------------------
    static char arr[][],encrypt[][],decrypt[][],keya[],keytemp[];//Transp-------
    static int row = 0,column = 0,k=0,col=0; //transposition--------------------------
    static String cs="ABCDEFGHIJKLMNOPQRSTUVWXYZ"; //Caesar Cipher--------------
    static String cd="abcdefghijklmnopqrstuvwxyz";//--------------------
    static int x,y;  //Caesar Cipher--------------------------------------------
    static int[][] keymatrix,plainmatrix,newmatrix,ciphermatrix; //hill cipher--
    static String hcs=" ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.?,-";//Hill cipher--
    int re=1,h=0,p1=1,mod=41,len=0,det,dinv=1,sum=0,z;//--------hill cipher
    int i,j,e1,n1; //for rsa and general use------------------------------------
    BigInteger p,q,n,e,pn,d; //Rsa use------------------------------------------
    String rsc=" abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";//rsa----
    /**
     * Creates new form mycryptool
     */
    public mycryptool() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtp1 = new javax.swing.JTabbedPane();
        jp1 = new javax.swing.JPanel();
        jb1 = new javax.swing.JButton();
        jb3 = new javax.swing.JButton();
        jb5 = new javax.swing.JButton();
        jb2 = new javax.swing.JButton();
        jb4 = new javax.swing.JButton();
        jb19 = new javax.swing.JButton();
        jp2 = new javax.swing.JPanel();
        jb6 = new javax.swing.JButton();
        jb7 = new javax.swing.JButton();
        jb8 = new javax.swing.JButton();
        jb9 = new javax.swing.JButton();
        jb10 = new javax.swing.JButton();
        jb17 = new javax.swing.JButton();
        jb18 = new javax.swing.JButton();
        jp3 = new javax.swing.JPanel();
        jb11 = new javax.swing.JButton();
        jb12 = new javax.swing.JButton();
        jtp2 = new javax.swing.JTabbedPane();
        jp4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jsp1 = new javax.swing.JScrollPane();
        jt1 = new javax.swing.JTree();
        jl2 = new javax.swing.JLabel();
        jtf1 = new javax.swing.JTextField();
        jtf1.disable();
        jb13 = new javax.swing.JButton();
        jb14 = new javax.swing.JButton();
        jl3 = new javax.swing.JLabel();
        jsp2 = new javax.swing.JScrollPane();
        jta1 = new javax.swing.JTextArea();
        jta1.requestFocus();
        jsp3 = new javax.swing.JScrollPane();
        jta2 = new javax.swing.JTextArea();
        jl4 = new javax.swing.JLabel();
        jl5 = new javax.swing.JLabel();
        jsp4 = new javax.swing.JScrollPane();
        jta3 = new javax.swing.JTextArea();
        jb15 = new javax.swing.JButton();
        jb16 = new javax.swing.JButton();
        jsp5 = new javax.swing.JScrollPane();
        jta4 = new javax.swing.JTextArea();
        jl6 = new javax.swing.JLabel();
        jtf2 = new javax.swing.JTextField();
        jtf2.setVisible(false);
        jtf3 = new javax.swing.JTextField();
        jtf3.setVisible(false);
        jl7 = new javax.swing.JLabel();
        jl7.setVisible(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MyCryptool");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Icons2/logo1.jpg")));

        jtp1.setFont(new java.awt.Font("Times New Roman", 1, 13)); // NOI18N
        jtp1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jtp1MouseEntered(evt);
            }
        });

        jb1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jb1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons2/Cut.jpg"))); // NOI18N
        jb1.setText("Cut");
        jb1.setToolTipText("CUT");
        jb1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb1ActionPerformed(evt);
            }
        });

        jb3.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jb3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons2/Paste.jpg"))); // NOI18N
        jb3.setText("Paste");
        jb3.setToolTipText("PASTE");
        jb3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jb3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb3ActionPerformed(evt);
            }
        });

        jb5.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jb5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons2/Plus.jpg"))); // NOI18N
        jb5.setText("Add Tab");
        jb5.setToolTipText("ADD TAB");
        jb5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jb5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb5ActionPerformed(evt);
            }
        });

        jb2.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jb2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons2/Copy.jpg"))); // NOI18N
        jb2.setText("Copy");
        jb2.setToolTipText("COPY");
        jb2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb2ActionPerformed(evt);
            }
        });

        jb4.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jb4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons2/Delete.jpg"))); // NOI18N
        jb4.setText("Clear");
        jb4.setToolTipText("CLEAR");
        jb4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jb4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb4MouseClicked(evt);
            }
        });

        jb19.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jb19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons2/Open.jpg"))); // NOI18N
        jb19.setText("Open");
        jb19.setToolTipText("ADD TAB");
        jb19.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jb19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb19ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jp1Layout = new javax.swing.GroupLayout(jp1);
        jp1.setLayout(jp1Layout);
        jp1Layout.setHorizontalGroup(
            jp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jb19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jb1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jb2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jb3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jb4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jb5)
                .addContainerGap(640, Short.MAX_VALUE))
        );
        jp1Layout.setVerticalGroup(
            jp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp1Layout.createSequentialGroup()
                .addGroup(jp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb1)
                    .addComponent(jb3)
                    .addComponent(jb5)
                    .addComponent(jb2)
                    .addComponent(jb4)
                    .addComponent(jb19))
                .addGap(124, 124, 124))
        );

        jtp1.addTab("Edit", jp1);

        jb6.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jb6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons2/CC.jpg"))); // NOI18N
        jb6.setText("Caesar Cipher");
        jb6.setToolTipText("CAESAR CIPHER");
        jb6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jb6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb6ActionPerformed(evt);
            }
        });

        jb7.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jb7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons2/Trans.jpg"))); // NOI18N
        jb7.setText("Transposition");
        jb7.setToolTipText("TRANSPOSITION");
        jb7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jb7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb7ActionPerformed(evt);
            }
        });

        jb8.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jb8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons2/Hc.jpg"))); // NOI18N
        jb8.setText("Hill Cipher");
        jb8.setToolTipText("HILL CIPHER");
        jb8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jb8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb8ActionPerformed(evt);
            }
        });

        jb9.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jb9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons2/Des.jpg"))); // NOI18N
        jb9.setText("DES");
        jb9.setToolTipText("DATA ENCRYPTION STANDARD");
        jb9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jb9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb9ActionPerformed(evt);
            }
        });

        jb10.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jb10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons2/rsa.jpg"))); // NOI18N
        jb10.setText("RSA");
        jb10.setToolTipText("RONALD SHAMIR ADLEMAN");
        jb10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jb10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb10ActionPerformed(evt);
            }
        });

        jb17.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jb17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons2/vc.jpg"))); // NOI18N
        jb17.setText("Vigenère Cipher");
        jb17.setToolTipText("Vigenère Cipher");
        jb17.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jb17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb17ActionPerformed(evt);
            }
        });

        jb18.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jb18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons2/rf.jpg"))); // NOI18N
        jb18.setText("RailFence Cipher");
        jb18.setToolTipText("RONALD SHAMIR ADLEMAN");
        jb18.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jb18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb18ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jp2Layout = new javax.swing.GroupLayout(jp2);
        jp2.setLayout(jp2Layout);
        jp2Layout.setHorizontalGroup(
            jp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp2Layout.createSequentialGroup()
                .addComponent(jb6, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jb7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jb8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jb9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jb10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jb17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jb18)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jp2Layout.setVerticalGroup(
            jp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp2Layout.createSequentialGroup()
                .addGroup(jp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb6, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb7, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb8, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb9, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb10, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb17, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb18, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jtp1.addTab("Algorithms", jp2);

        jb11.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jb11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons2/Software1.jpg"))); // NOI18N
        jb11.setText("MyCryptool");
        jb11.setToolTipText("MYCRYPTOOL");
        jb11.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jb11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb11ActionPerformed(evt);
            }
        });

        jb12.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jb12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons2/developer2.jpg"))); // NOI18N
        jb12.setText("Developers");
        jb12.setToolTipText("DEVELOPERS");
        jb12.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jb12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jp3Layout = new javax.swing.GroupLayout(jp3);
        jp3.setLayout(jp3Layout);
        jp3Layout.setHorizontalGroup(
            jp3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp3Layout.createSequentialGroup()
                .addComponent(jb12, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jb11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jp3Layout.setVerticalGroup(
            jp3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jb12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jb11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jtp1.addTab("About", jp3);

        jtp2.setFont(new java.awt.Font("Times New Roman", 1, 13)); // NOI18N
        jtp2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jtp2MouseEntered(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons2/Fn.png"))); // NOI18N

        jt1.setFont(new java.awt.Font("Times New Roman", 0, 14));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Algorithms");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Asymmetric");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("RSA");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Symmetric");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Caesar Cipher");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Transposition");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Hill Cipher");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("DES");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Vigenere Cipher");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("RABN Cipher");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("RailFence Cipher");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        jt1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jt1.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        jt1.setToolTipText("");
        jt1.setScrollsOnExpand(false);
        jt1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jt1MouseEntered(evt);
            }
        });
        jt1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jt1ValueChanged(evt);
            }
        });
        jsp1.setViewportView(jt1);

        jl2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jl2.setText("KEY : ");

        jtf1.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        jtf1.setToolTipText("KEY");
        jtf1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jtf1MouseEntered(evt);
            }
        });
        jtf1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtf1FocusGained(evt);
            }
        });

        jb13.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jb13.setText("Generate Key");
        jb13.setToolTipText("GENERATE SECRET KEY");
        jb13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jb13MouseEntered(evt);
            }
        });

        jb14.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jb14.setText("Generate Key Pair");
        jb14.setToolTipText("GENERATE PUBLIC AND PRIVATE KEY");
        jb14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jb14MouseEntered(evt);
            }
        });
        jb14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb14ActionPerformed(evt);
            }
        });

        jl3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jl3.setText("PLAIN TEXT : ");

        jsp2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jsp2.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        jta1.setColumns(20);
        jta1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jta1.setLineWrap(true);
        jta1.setRows(5);
        jta1.setToolTipText("PLAIN TEXT");
        jta1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jta1MouseEntered(evt);
            }
        });
        jta1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jta1FocusGained(evt);
            }
        });
        jsp2.setViewportView(jta1);

        jta2.setEditable(false);
        jta2.setColumns(20);
        jta2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jta2.setLineWrap(true);
        jta2.setRows(5);
        jta2.setToolTipText("PLAIN TEXT");
        jta2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jta2MouseEntered(evt);
            }
        });
        jta2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jta2FocusGained(evt);
            }
        });
        jsp3.setViewportView(jta2);

        jl4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jl4.setText("PLAIN TEXT :");

        jl5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jl5.setText("CIPHER TEXT : ");

        jta3.setColumns(20);
        jta3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jta3.setLineWrap(true);
        jta3.setRows(5);
        jta3.setToolTipText("CIPHER TEXT");
        jta3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jta3MouseEntered(evt);
            }
        });
        jta3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jta3FocusGained(evt);
            }
        });
        jsp4.setViewportView(jta3);

        jb15.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jb15.setText("ENCRYPT");
        jb15.setToolTipText("ENCRYPTION");
        jb15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jb15MouseEntered(evt);
            }
        });
        jb15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb15ActionPerformed(evt);
            }
        });

        jb16.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jb16.setText("DECRYPT");
        jb16.setToolTipText("DECRYPTION");
        jb16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jb16MouseEntered(evt);
            }
        });
        jb16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb16ActionPerformed(evt);
            }
        });

        jsp5.setToolTipText("INFORMATION");
        jsp5.setEnabled(false);
        jsp5.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        jta4.setEditable(false);
        jta4.setColumns(20);
        jta4.setLineWrap(true);
        jta4.setRows(5);
        jta4.setText("                   INFO");
        jsp5.setViewportView(jta4);

        jl6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jl7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jl7.setText("KEY for RSA (e,n) or (d,n)  : ");

        javax.swing.GroupLayout jp4Layout = new javax.swing.GroupLayout(jp4);
        jp4.setLayout(jp4Layout);
        jp4Layout.setHorizontalGroup(
            jp4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp4Layout.createSequentialGroup()
                .addGroup(jp4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jsp1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jsp5, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jp4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jp4Layout.createSequentialGroup()
                        .addGroup(jp4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jp4Layout.createSequentialGroup()
                                .addGap(117, 117, 117)
                                .addComponent(jb15)
                                .addGap(207, 207, 207)
                                .addComponent(jsp4, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(157, 157, 157)
                                .addComponent(jb16))
                            .addGroup(jp4Layout.createSequentialGroup()
                                .addComponent(jl3)
                                .addGap(709, 709, 709)
                                .addComponent(jl4))
                            .addGroup(jp4Layout.createSequentialGroup()
                                .addGap(441, 441, 441)
                                .addComponent(jl5)))
                        .addGap(70, 158, Short.MAX_VALUE))
                    .addGroup(jp4Layout.createSequentialGroup()
                        .addGroup(jp4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jsp2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jp4Layout.createSequentialGroup()
                                .addGap(178, 178, 178)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jsp3, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jp4Layout.createSequentialGroup()
                        .addGroup(jp4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jp4Layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addComponent(jtf1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(jl6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(67, 67, 67)
                                .addComponent(jb13))
                            .addComponent(jl2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jl7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jb14)
                        .addGap(47, 47, 47))))
        );
        jp4Layout.setVerticalGroup(
            jp4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp4Layout.createSequentialGroup()
                .addComponent(jsp1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jsp5, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jp4Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jp4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jp4Layout.createSequentialGroup()
                        .addGroup(jp4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jp4Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jtf1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jp4Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jl6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jb13)
                            .addGroup(jp4Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(jp4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jtf3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jb14)
                                    .addComponent(jtf2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jl7, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(19, 19, 19)
                        .addComponent(jl4)
                        .addGap(11, 11, 11)
                        .addGroup(jp4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jsp2, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jsp3, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(jp4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jsp4, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jp4Layout.createSequentialGroup()
                                .addGap(134, 134, 134)
                                .addGroup(jp4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jb15)
                                    .addComponent(jb16)))))
                    .addGroup(jp4Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jl3))
                    .addGroup(jp4Layout.createSequentialGroup()
                        .addGap(299, 299, 299)
                        .addComponent(jl5))
                    .addGroup(jp4Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jl2))
                    .addGroup(jp4Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        jtp2.addTab("Tab", jp4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtp2)
            .addComponent(jtp1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jtp1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtp2)
                .addGap(2436, 2436, 2436))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jb4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb4MouseClicked
        // TODO add your handling code here:
        //Clear code------------------------------------------------------------
        jta1.setText("");
        jta2.setText("");
        jta3.setText("");
        jtf1.setText("");
        jtf2.setText("");
        jtf3.setText("");
    }//GEN-LAST:event_jb4MouseClicked

    private void jb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb2ActionPerformed
        // TODO add your handling code here:
        
        //COPY CODE-------------------------------------------------------------
        
        try
        {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
	Clipboard clipboard = toolkit.getSystemClipboard();
	//a = (String) clipboard.getData(DataFlavor.stringFlavor);
        if(ab==true)
        {
         a=jta1.getSelectedText();
        }
        else if(bc==true){
         a=jta2.getSelectedText();
        }
        else if(ac==true){
         a=jta3.getSelectedText();   
        }
        else if(ad==true){
         a=jtf1.getSelectedText();   
        }
        StringSelection stringSelection = new StringSelection (a);
        clipboard.setContents(stringSelection, null);
        }
        catch(Exception e){
            
        }
    }//GEN-LAST:event_jb2ActionPerformed

    private void jb3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb3ActionPerformed
        // TODO add your handling code here
        
        //PASTE CODE------------------------------------------------------------
        
        try
        {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
	Clipboard clipboard = toolkit.getSystemClipboard();
	a = (String) clipboard.getData(DataFlavor.stringFlavor);
        if(ab==true){
        b=jta1.getText();
        jta1.setText(b+""+a);
        }
        else if(bc==true){
        b=jta2.getText();
        jta2.setText(b+""+a);    
        }
        else if(ac==true){
        b=jta3.getText();
        jta3.setText(b+""+a);
        }
        else if(ad==true){
        b=jtf1.getText();
        jtf1.setText(b+""+a);
        }
        }
        catch(Exception e){
            
        }
    }//GEN-LAST:event_jb3ActionPerformed

    private void jb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb1ActionPerformed
        // TODO add your handling code here:
        
        //CUT CODE--------------------------------------------------------------
        
        try
        {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
	Clipboard clipboard = toolkit.getSystemClipboard();
	//a = (String) clipboard.getData(DataFlavor.stringFlavor);
        if(ab==true)
        {
        a=jta1.getSelectedText();
        //jta1.setText("");
        jta1.cut();
        }
        else if(bc==true)
        {
        a=jta2.getSelectedText();
        //jta2.setText("");
        jta2.cut();
        }
        else if(ac==true)
        {
        a=jta3.getSelectedText();
        //jta3.setText("");
        jta3.cut();
        }
        else if(ad==true)
        {
        a=jtf1.getSelectedText();
        jtf1.setText("");
        }
        StringSelection stringSelection = new StringSelection (a);
        clipboard.setContents(stringSelection, null);
        }
        catch(Exception e){
            
        }   
    }//GEN-LAST:event_jb1ActionPerformed

    private void jt1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt1MouseEntered
        // TODO add your handling code here:
        //Info for JTree--------------------------------------------------------
        setCursor(Cursor.HAND_CURSOR);
        jta4.setText("                   INFO\n\nThis component is a JTree and is used to select an Algorithm.");
    }//GEN-LAST:event_jt1MouseEntered

    private void jb15MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb15MouseEntered
        // TODO add your handling code here:
        //Info for encrypt button-----------------------------------------------
        setCursor(Cursor.HAND_CURSOR);
        jta4.setText("                   INFO\n\nThis button is used to start the encryption process.");
    }//GEN-LAST:event_jb15MouseEntered

    private void jb16MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb16MouseEntered
        // TODO add your handling code here:
        //Info for Decrypt button-----------------------------------------------
        setCursor(Cursor.HAND_CURSOR);
        jta4.setText("                   INFO\n\nThis button isused to start the decryption process.");
    }//GEN-LAST:event_jb16MouseEntered

    private void jta3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jta3MouseEntered
        // TODO add your handling code here:
        //Info for encrypted text-----------------------------------------------
        jta4.setText("                   INFO\n\nThis text area will show the encrypted text.");
    }//GEN-LAST:event_jta3MouseEntered

    private void jta2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jta2MouseEntered
        // TODO add your handling code here:
        //Info for decrypted text-----------------------------------------------
        jta4.setText("                   INFO\n\nThis text area will show the decrypted text.");
    }//GEN-LAST:event_jta2MouseEntered

    private void jta1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jta1MouseEntered
        // TODO add your handling code here:
        //Info for plain text---------------------------------------------------
        jta4.setText("                   INFO\n\nThis text area is used to enter the plain text.");
    }//GEN-LAST:event_jta1MouseEntered

    private void jtf1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtf1MouseEntered
        // TODO add your handling code here:
        //Info for key input----------------------------------------------------
        jta4.setText("                   INFO\n\nThis is used to enter key  for Ceasar Cipher and Transposition");
    }//GEN-LAST:event_jtf1MouseEntered

    private void jb13MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb13MouseEntered
        // TODO add your handling code here:
        //Info for generate key-------------------------------------------------
        setCursor(Cursor.HAND_CURSOR);
        jta4.setText("                   INFO\n\nUsed to generate secret key.");
    }//GEN-LAST:event_jb13MouseEntered

    private void jb14MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb14MouseEntered
        // TODO add your handling code here:
        //Info for generate key pair--------------------------------------------
        setCursor(Cursor.HAND_CURSOR);
        jta4.setText("                   INFO\n\nUsed to generate public and private key.");
    }//GEN-LAST:event_jb14MouseEntered

    private void jb6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb6ActionPerformed
        // TODO add your handling code here:
        
        //CC.pdf----------------------------------------------------------------
        
        cc cr=new cc();
        cr.setVisible(true);
    }//GEN-LAST:event_jb6ActionPerformed

    private void jb5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb5ActionPerformed
        // TODO add your handling code here:
        
        //javax.swing.JPanel jp[]=new javax.swing.JPanel[jt];
        //jp[jt]=jp4;
        //jtp2.add( new javax.swing.JPanel(),jp[jt]);
        //jt++;
       // jtp2.addTab("Ta", jp4);
        //jtp2.insertTab("Ta", null, jp4, null, 1);
        
    }//GEN-LAST:event_jb5ActionPerformed

    private void jta1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jta1FocusGained
        // TODO add your handling code here:
        //Focus on textarea1----------------------------------------------------
        ab=true;
        bc=false;
        ac=false;
        ad=false;
    }//GEN-LAST:event_jta1FocusGained

    private void jta2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jta2FocusGained
        // TODO add your handling code here:
        //Focus on textarea2----------------------------------------------------
        bc=true;
        ab=false;
        ac=false;
        ad=false;
    }//GEN-LAST:event_jta2FocusGained

    private void jta3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jta3FocusGained
        // TODO add your handling code here:
        //Focus on textarea3----------------------------------------------------
        ac=true;
        ab=false;
        bc=false;
        ad=false;
    }//GEN-LAST:event_jta3FocusGained

    private void jtf1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtf1FocusGained
        // TODO add your handling code here:
        //Focus on TextField1---------------------------------------------------
        ad=true;
        ab=false;
        bc=false;
        ac=false;
        
    }//GEN-LAST:event_jtf1FocusGained

    private void jb7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb7ActionPerformed
        // TODO add your handling code here:
        
        //Trans.pdf-------------------------------------------------------------
        
        trans ta=new trans();
        ta.setVisible(true);
        
    }//GEN-LAST:event_jb7ActionPerformed

    private void jb8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb8ActionPerformed
        // TODO add your handling code here:
        
        //Hill.pdf--------------------------------------------------------------
        
        hill hl = null;
        try {
            hl = new hill();
        } catch (URISyntaxException ex) {
            Logger.getLogger(mycryptool.class.getName()).log(Level.SEVERE, null, ex);
        }
        hl.setVisible(true);
    }//GEN-LAST:event_jb8ActionPerformed

    private void jb9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb9ActionPerformed
        // TODO add your handling code here:
        
        //Des.pdf---------------------------------------------------------------
        
        des de=new des();
        de.setVisible(true);
    }//GEN-LAST:event_jb9ActionPerformed

    private void jb10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb10ActionPerformed
        // TODO add your handling code here:
        
        //rsa.pdf---------------------------------------------------------------
        
        vc r = null;
        try {
            r = new vc();
        } catch (URISyntaxException ex) {
            Logger.getLogger(mycryptool.class.getName()).log(Level.SEVERE, null, ex);
        }
        r.setVisible(true);
    }//GEN-LAST:event_jb10ActionPerformed

    private void jb12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb12ActionPerformed
        // TODO add your handling code here:
        //developers frame------------------------------------------------------
        developers d1=new developers();
        d1.setVisible(true);
    }//GEN-LAST:event_jb12ActionPerformed

    private void jb11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb11ActionPerformed
        // TODO add your handling code here:
        //software frame--------------------------------------------------------
        software s = null;
        try {
            s = new software();
        } catch (URISyntaxException ex) {
            Logger.getLogger(mycryptool.class.getName()).log(Level.SEVERE, null, ex);
        }
        s.setVisible(true);
    }//GEN-LAST:event_jb11ActionPerformed

    private void jt1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jt1ValueChanged
        // TODO add your handling code here:
        
        
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)jt1.getLastSelectedPathComponent();
        
        Object nodeinfo = node.getUserObject();
        t1 = nodeinfo.toString();

         if(t1.equalsIgnoreCase("Caesar Cipher"))
        {
            cc=true;tr=false;hc=false;rsa=false;des=false;vc=false;rabn=false;rf=false;
            ky=e1=n1=0;
            /*ky=0;
            sk=pr=pb=null;*/
            key=null;
            jtf1.setEnabled(true);
            jb13.setEnabled(false);
            jb14.setEnabled(false);
            //jta1.setText("");
            jta2.setText("");
            jta3.setText("");
            jtf1.setText("");
            jl6.setText("(Integers only)");
            jtf2.setVisible(false);
            jtf3.setVisible(false);
            jl7.setVisible(false);
        }
         else if(t1.equalsIgnoreCase("Transposition"))
        {
            cc=false;tr=true;hc=false;rsa=false;des=false;vc=false;rabn=false;rf=false;
            ky=e1=n1=0;
            /*ky=0;
            sk=pr=pb=null;*/
            key=null;
            jtf1.setEnabled(true);
            jb13.setEnabled(false);
            jb14.setEnabled(false);
            //jta1.setText("");
            jta2.setText("");
            jta3.setText("");
            jtf1.setText("");
            jl6.setText("(Characters only)");
            jtf2.setVisible(false);
            jtf3.setVisible(false);
            jl7.setVisible(false);
        }
         else if(t1.equalsIgnoreCase("Hill Cipher"))
        {
            cc=false;tr=false;hc=true;rsa=false;des=false;vc=false;rabn=false;rf=false;
            ky=n1=e1=0;
            /*ky=0;
            sk=pr=pb=null;*/
            key=null;
            jtf1.setEnabled(true);
            jb13.setEnabled(false);
            jb14.setEnabled(false);
            //jta1.setText("");
            jta2.setText("");
            jta3.setText("");
            jtf1.setText("");
            jl6.setText("(Characters only)");
            jtf2.setVisible(false);
            jtf3.setVisible(false);
            jl7.setVisible(false);
        }
         else  if(t1.equalsIgnoreCase("DES"))
        {
            cc=false;tr=false;hc=false;rsa=false;des=true;vc=false;rabn=false;rf=false;
            ky=e1=n1=0;
            /*ky=0;
            sk=pr=pb=null;*/
            key=null;
            jtf1.setEnabled(false);
            jb13.setEnabled(true);
            jb14.setEnabled(false);
            //jta1.setText("");
            jta2.setText("");
            jta3.setText("");
            jtf1.setText("");
            jl6.setText("");
            jtf2.setVisible(false);
            jtf3.setVisible(false);
            jl7.setVisible(false);
        }
         else if(t1.equalsIgnoreCase("RSA"))
        {           
            cc=false;tr=false;hc=false;rsa=true;des=false;vc=false;rabn=false;rf=false;
            ky=e1=n1=0;
            /*ky=0;
            sk=pr=pb=null;*/
            key=null;
            jtf1.setEnabled(false);
            jb13.setEnabled(false);
            jb14.setEnabled(true);
            //jta1.setText("");
            jta2.setText("");
            jta3.setText("");
            jtf1.setText("");
            jl6.setText("");
            jtf2.setVisible(true);
            jtf3.setVisible(true);
            jl7.setVisible(true);
        }      
         else if(t1.equalsIgnoreCase("Vigenere Cipher"))
        {
            cc=false;tr=false;hc=false;rsa=false;des=false;vc=true;rabn=false;rf=false;
            ky=e1=n1=0;
            /*ky=0;
            sk=pr=pb=null;*/
            key=null;
            jtf1.setEnabled(true);
            jb13.setEnabled(false);
            jb14.setEnabled(false);
            //jta1.setText("");
            jta2.setText("");
            jta3.setText("");
            jtf1.setText("");
            jl6.setText("(Characters only)");
            jtf2.setVisible(false);
            jtf3.setVisible(false);
            jl7.setVisible(false);
        }
         else if(t1.equalsIgnoreCase("RABN Cipher"))
        {
            cc=false;tr=false;hc=false;rsa=false;des=false;vc=false;rabn=true;rf=false;
            ky=e1=n1=0;
            /*ky=0;
            sk=pr=pb=null;*/
            key=null;
            jtf1.setEnabled(true);
            jb13.setEnabled(false);
            jb14.setEnabled(false);
            //jta1.setText("");
            jta2.setText("");
            jta3.setText("");
            jtf1.setText("");
            jl6.setText("(Characters only)");
            jtf2.setVisible(false);
            jtf3.setVisible(false);
            jl7.setVisible(false);
        }
         else if(t1.equalsIgnoreCase("RailFence Cipher"))
        {
            cc=false;tr=false;hc=false;rsa=false;des=false;vc=false;rabn=false;rf=true;
            ky=e1=n1=0;
            /*ky=0;
            sk=pr=pb=null;*/
            key=null;
            jtf1.setEnabled(true);
            jb13.setEnabled(false);
            jb14.setEnabled(false);
            //jta1.setText("");
            jta2.setText("");
            jta3.setText("");
            jtf1.setText("");
            jl6.setText("(Integer only)");
            jtf2.setVisible(false);
            jtf3.setVisible(false);
            jl7.setVisible(false);
        }
    }//GEN-LAST:event_jt1ValueChanged

    private void jb15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb15ActionPerformed
        // TODO add your handling code here:
        
        if(cc==false && tr==false && hc==false && des==false && rsa==false && vc==false && rabn==false && rf==false){
            JOptionPane.showMessageDialog(null, "Select the Algorithm first.","ERROR", JOptionPane.ERROR_MESSAGE);
        }
        //Caesar Cipher---------------------------------------------------------
        else if(cc==true){
            //String o=jtf1.getText();
            if(jtf1.getText().equalsIgnoreCase("")){
               JOptionPane.showMessageDialog(null, "Enter the Key first.","ERROR", JOptionPane.ERROR_MESSAGE); 
            }
            else{
                ky=Integer.parseInt(jtf1.getText());
                if(ky>=26 || ky<=0)
                {
                 JOptionPane.showMessageDialog(null, "Invalid!!! Key should be greater than 0 and less than 26.", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
                else
                {         
                x=y=0;    
                s1=s2="";    
                //s1=jta1.getText().toUpperCase();
                s1=jta1.getText();
                jta3.setText(""); //to empty the field when encrypt is pressed again
                //String c=" ";
                len=s1.length();
                int arry[]=new int[len];
                
                for(i=0;i<len;i++){
                    arry[i]=(int)s1.charAt(i);
                    
                    //System.out.print(arry[i]+"nabil");
                    if(arry[i]>=65 && arry[i]<=91){
                     x=cs.indexOf(s1.charAt(i));
                     y=(x+ky)%26;
                     s2=s2+cs.charAt(y);
                    }
                    else if(arry[i]>=97 && arry[i]<=123){
                        x=cd.indexOf(s1.charAt(i));
                        y=(x+ky)%26;
                        s2=s2+cd.charAt(y);
                    }
                    else{
                     s2=s2+s1.charAt(i);
                    }
                }
                jta3.setText(s2);
                }
            }             
        }
        else if(vc==true){
            if(jtf1.getText().equalsIgnoreCase("")){
               JOptionPane.showMessageDialog(null, "Enter the Key first.","ERROR", JOptionPane.ERROR_MESSAGE); 
            }
            else{
               key=jtf1.getText().toUpperCase();
               jta3.setText("");
               s1=s2="";
               s1=jta1.getText().toUpperCase();
               int array[]=new int[s1.length()];
               for(i=0,j=0;i<s1.length();i++)
                {
                   array[i]=(int) s1.charAt(i);
                   if((array[i]>=65) &&(array[i]<=91)){
                       s2+=(char)((s1.charAt(i)+key.charAt(j)-2 * 65) % 26 + 65);
                       j=++j %key.length();
                   }
                   else{
                       s2=s2+s1.charAt(i);
                   }
                }
               jta3.setText(s2);
           }
        }    
        else if(tr==true){
            if(jtf1.getText().equalsIgnoreCase("")){
               JOptionPane.showMessageDialog(null, "Enter the Key first.","ERROR", JOptionPane.ERROR_MESSAGE); 
            }
            else{
                for(i=0;i<row;i++){
                    for(j=0;j<column;j++){
                        arr[i][j]=' ';
                        keya[j]=' ';
                        keytemp[j]=' ';
                    }
                }
                k=0;
                s1=s2="";
                jta3.setText(""); //for again encrypt key press
                key=jtf1.getText().toUpperCase();
                s1=jta1.getText().toUpperCase();
                if(s1.length()<key.length()){
                    JOptionPane.showMessageDialog(null, "Key should be smaller than text.","ERROR", JOptionPane.ERROR_MESSAGE);
                }
                else{
                row=(s1.length() / key.length());
                if(s1.length() % key.length() !=0)
                    row++;
                column=key.length();
                arr=new char[row][column];
                keya=key.toCharArray();
                for(i=0;i<row;i++){
                    for(j=0;j<column;j++){
                        if(k<s1.length()){
                            arr[i][j]=s1.charAt(k);
                            k++;
                        }
                        else{
                            arr[i][j]=' ';
                        }
                    }
                }
                keytemp=key.toCharArray();
                for(i=0;i<column-1;i++){
                    for(j=i+1;j<column;j++){
                        if(keytemp[i]>keytemp[j]){
                            char temp=keytemp[i];
                            keytemp[i]=keytemp[j];
                            keytemp[j]=temp;
                        }
                    }
                }
                encrypt = new char[row][column];
                for(i=0;i<column;i++){
                    for(j=0;j<column;j++){
                        if(keya[i]==keytemp[j]){
                            for(k=0;k<row;k++){
                                encrypt[k][j]=arr[k][i];
                            }
                            keytemp[j]='?';
                            break;
                        }
                    }
                }
                for(i=0;i<column;i++){
                    for(j=0;j<row;j++){
                     b=jta3.getText();
                     jta3.setText(b+""+encrypt[j][i]);
                    }
                }
                
            }
          }
        }
        else if(rabn==true){
            if(jtf1.getText().equalsIgnoreCase("")){
               JOptionPane.showMessageDialog(null, "Enter the Key first.","ERROR", JOptionPane.ERROR_MESSAGE); 
            }
            else{
                k=0;
                s1=s2="";
                jta3.setText(""); //for again encrypt key press
                key=jtf1.getText().toUpperCase();
                s1=jta1.getText().toUpperCase();
                if(s1.length()<key.length()){
                    JOptionPane.showMessageDialog(null, "Key should be smaller than text.","ERROR", JOptionPane.ERROR_MESSAGE);
                }
                else{
                row=(s1.length() / key.length());
                if(s1.length() % key.length() !=0)
                    row++;
                column=key.length();
                arr=new char[row][column];
                keya=key.toCharArray();
                for(i=0;i<row;i++){
                    for(j=0;j<column;j++){
                        if(k<s1.length()){
                            arr[i][j]=s1.charAt(k);
                            k++;
                        }
                        else{
                            arr[i][j]=' ';
                        }
                    }
                }
                keytemp=key.toCharArray();          //key temp is a 1D array
                for(i=0;i<column-1;i++){
                    for(j=i+1;j<column;j++){
                        if(keytemp[i]>keytemp[j]){
                            char temp=keytemp[i];
                            keytemp[i]=keytemp[j];
                            keytemp[j]=temp;
                        }
                    }
                }
                encrypt = new char[row][column];
                for(i=0;i<column;i++){
                    for(j=0;j<column;j++){
                        if(keya[i]==keytemp[j]){
                            for(k=0;k<row;k++){
                                encrypt[k][j]=arr[k][i];
                            }
                            keytemp[j]='?';
                            break;                        
                        }
                    }
                }
                for(i=0;i<column;i++){
                    for(j=0;j<row;j++){
                     //b=jta3.getText();
                     //jta3.setText(b+""+encrypt[j][i]);
                       s2=s2+encrypt[j][i];
                    }
                }
                //jta2.setText(s2);
                
                ky=(int) (keya[0]-64);
                if(ky==26){
                    ky=ky-1;
                }
                x=y=0;
                s1=s2;
                s2="";
                len=s1.length();
                int arry[]=new int[len];
                for(i=0;i<len;i++){
                    arry[i]=(int)s1.charAt(i);
                    if(s1.charAt(i)==' '){
                        s2=s2+s1.charAt(i);
                        //s2=s2+'A';
                    }
                    else if(arry[i]>=65 && arry[i]<=91){
                     x=cs.indexOf(s1.charAt(i));
                     y=(x+ky)%26;
                     s2=s2+cs.charAt(y);
                    }
                    else{
                     s2=s2+s1.charAt(i);
                    }
                }
                jta3.setText(s2);
                
            }
          }
        }
        else if(hc==true){
            if(jtf1.getText().equalsIgnoreCase("")){
               JOptionPane.showMessageDialog(null, "Enter the Key first.","ERROR", JOptionPane.ERROR_MESSAGE); 
            }
            else{
                s1=s2="";
                jta3.setText("");
                key=jtf1.getText().toUpperCase();
                s1=jta1.getText().toUpperCase();
                len=s1.length();
                re=1;
                k=0;
                //if(key.length()<2 && key.length()>9){
                if(key.length()>9 || key.length()<2){
                    JOptionPane.showMessageDialog(null, "Key should be in between 2 to 9 characters.","ERROR", JOptionPane.ERROR_MESSAGE);
                }
                else{
                    if(key.length()>=2 && key.length()<=4)
                    {			
			row = 2;
			column = 2;
                    }
                    else if(key.length()>=5 && key.length()<=9)
                    {			
			row = 3;
			column = 3;
                    }
                    //Key Matrix -----------------------------------------------
                    keymatrix = new int[row][column];
                    for(i=0 ; i<row ; i++)
                    {
			 for(j=0 ; j<column ; j++)
			 {				
				 if(k<key.length())
				 {
					 keymatrix[i][j] = hcs.indexOf(key.charAt(k));
					 k++;
					 //System.out.println(keymatrix[i][j]);				 
				 }
				 else 
				 {
					 
					 keymatrix[i][j] =  re;
					 re++;
					 //System.out.println(keymatrix[i][j]);
				 }
			 }
                    }
                    //Determining column of plain matrix------------------------
                    for( i=0 ; len%row != 0 ; i++)
                    {
                        len++;
		
                    }
                    col = len/row;
                    k=0;
                    //Creating plaintext matrix---------------------------------
                    plainmatrix = new int[row][col]; 
		 
                    for( i=0 ; i<row ; i++)
                    {
			 for( j=0 ; j<col ; j++)
			 {				
				 if(k<s1.length())
				 {							
                                      plainmatrix[i][j] = hcs.indexOf(s1.charAt(k));
				      k++;	 			 
				 }
				 else 
				 {
					 plainmatrix[i][j] = 0;					 
				 }
			 }
                    }
                    // Matrix after multiplication -----------------------------
                    newmatrix = new int[row][col];
                    sum=0;
                    for(i=0 ; i<row ; i++)
                    {
			 for(j=0 ; j<col; j++)
			 {
				 for(int d1=0 ; d1<row ; d1++)
				 {
					sum = sum + keymatrix[i][d1] * plainmatrix[d1][j];
				 }
				 newmatrix[i][j] = sum;
				 sum=0;
			 }
                    }
                    //Matrix after mod------------------------------------------
                    ciphermatrix = new int[row][col];
	
                    for( i=0 ; i<row ; i++)
                    {
                        for( j=0 ; j<col ; j++)
                        {
                            ciphermatrix[i][j] = newmatrix[i][j] % 41;
                        }
                    }
                    //Matrix of Cipher text-------------------------------------
                    	
                    
                    for(  i=0 ; i<row ; i++)
                    {
                        for( j=0 ; j<col ; j++)
                        {
                            s2 = s2+ hcs.charAt(ciphermatrix[i][j]);
			
                        }
                    }
                     jta3.setText(s2);
                }
            }                   
        }
        else if(rsa==true){
            if(jtf2.getText().equalsIgnoreCase("") || jtf3.getText().equalsIgnoreCase("")){
               JOptionPane.showMessageDialog(null, "Generate the key pair and enter the keys.","ERROR", JOptionPane.ERROR_MESSAGE); 
            }
            else{
                s1=s2="";
                jta3.setText("");
                key=jtf2.getText();
                e1=Integer.parseInt(key);
                //System.out.println(e1);
                key=jtf3.getText();
                n1=Integer.parseInt(key);
                //System.out.println(n1);
                s1=jta1.getText();
                k=0;
                int x5[]=new int[s1.length()];     //x5 variable is used to save the input string corresponding index value
                for(i=0;i<s1.length();i++){
                    for(j=0;j<rsc.length();j++){
                        if(s1.charAt(i)==rsc.charAt(j)){
                            x5[k]=j;
                            k++;
                           // System.out.println(x5[j]);
                        }
                    }
                }
                BigInteger e2=new BigInteger(String.valueOf(e1));
                BigInteger n2=new BigInteger(String.valueOf(n1));
                String s4="";
                int[] fi=new int[s1.length()];
                for(i=0;i<s1.length();i++){
                    //x5[i]= (int) ((Math.pow(x5[i], e1)) % n1);
                    BigInteger test = new BigInteger(String.valueOf(x5[i]));
                    test=test.modPow(e2, n2);
                    s4=s4+test;
                    fi[i]=Integer.parseInt(s4);
                    s4="";
                }
                
                String[] array= new String[4];//={'?','|',':','/'};
                array[0]="?";
                array[1]="|";
                array[2]=":";
                array[3]="/";
                for(i=0,j=0;i<x5.length;i++,j++){
                s2=s2+fi[i];
                s2=s2+ array[j];
                if(j==3){
                    j=-1;
                }
                }
                jta3.setText(s2);
            }
        }
        else if(rf==true){
            ky=Integer.parseInt(jtf1.getText());
            if(ky>4){
               JOptionPane.showMessageDialog(null, "Key should be less than 5.","ERROR", JOptionPane.ERROR_MESSAGE); 
            }
            else{
                int temp,spaces,shift=0,itr,p=0;
                s1=jta1.getText();
                jta3.setText("");
                temp=s1.length()-ky;
                if(temp%(ky-1)!=0)
                {
                 spaces=(ky-1)-(temp%(ky-1));
                 if((temp/(ky-1))%2!=0)
                 {
                  spaces+=ky-1;
                 }   
                }
                else
                {
                 spaces=temp%(ky-1);
                 if((temp/(ky-1))%2==0)
                 {
                  spaces+=ky-1;
                 }
                }
                for(i=0;i<spaces;i++)
                s1+=' ';
                for(i=0;i<ky;i++)
                {
                 p=i;
                 if(i==0||i==ky-1)
                 shift=((ky-2)*2)+2;
                 itr=1;
                 b="";
                 while(p<s1.length())
                 {
                  b=jta3.getText();
                  jta3.setText(b+s1.charAt(p));
                  if(i!=0&&i!=ky-1)
                  {
                    shift=((ky*itr-itr)-p)*2;
                  }
                  p+=shift;
                  itr++;
                 }
                }
            }
        }
    }//GEN-LAST:event_jb15ActionPerformed

    private void jb16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb16ActionPerformed
        // TODO add your handling code here:
        
        if(cc==false && tr==false && hc==false && des==false && rsa==false && vc==false && rabn==false && rf==false){
            JOptionPane.showMessageDialog(null, "Select the Algorithm first.","ERROR", JOptionPane.ERROR_MESSAGE);
        }
        //Caesar Cipher---------------------------------------------------------
        else if(cc==true){
            //String o=jtf1.getText();
            if(jtf1.getText().equalsIgnoreCase("")){
               JOptionPane.showMessageDialog(null, "Enter the Key first.","ERROR", JOptionPane.ERROR_MESSAGE); 
            }
            else{
                ky=Integer.parseInt(jtf1.getText());
                if(ky>=26 || ky<=0)
                {
                 JOptionPane.showMessageDialog(null, "Invalid!!! Key should be greater than 0 and less than 26.", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
                else{
                x=y=0;   
                s1=s2="";    
                s1=jta3.getText();
                jta2.setText(""); //to empty the field when encrypt is pressed again
                //String c=" ";
                len=s1.length();
                int arry[]=new int[len];
                for( i=0;i<len;i++){
                    arry[i]=(int)s1.charAt(i);
                    if(arry[i]>=65 && arry[i]<=91){
                     x=cs.indexOf(s1.charAt(i));
                     y=(x+(26-ky))%26;
                     s2=s2+cs.charAt(y);
                    }
                    else if(arry[i]>=97 && arry[i]<=123){
                        x=cd.indexOf(s1.charAt(i));
                        y=(x+(26-ky))%26;
                        s2=s2+cd.charAt(y);
                    }
                    else{
                     s2=s2+s1.charAt(i);
                    }
                }
                jta2.setText(s2);
                }
            }  
            
        }
        else if(vc==true){
            if(jtf1.getText().equalsIgnoreCase("")){
               JOptionPane.showMessageDialog(null, "Enter the Key first.","ERROR", JOptionPane.ERROR_MESSAGE); 
            }
            else{
                key = jtf1.getText().toUpperCase();
                jta2.setText("");
                s1=s2="";
                s1= jta3.getText().toUpperCase();
                int array[]=new int[s1.length()];
                for( i=0,j=0; i<s1.length(); i++)
                {
                  array[i]=(int) s1.charAt(i);
                  if(array[i]>=65 && array[i]<=91){
                      s2+=(char) ((s1.charAt(i) - key.charAt(j) + 26) % 26 + 65);
                      j=++j % key.length();
                  }
                  else{
                      s2=s2+s1.charAt(i);
                  }
                }            
                jta2.setText(s2);
            }
        }
        else if(tr==true){
            if(jtf1.getText().equalsIgnoreCase("")){
               JOptionPane.showMessageDialog(null, "Enter the Key first.","ERROR", JOptionPane.ERROR_MESSAGE); 
            }
            else{
                for( i=0;i<row;i++){
                    for( j=0;j<column;j++){
                        arr[i][j]=' ';
                        keya[j]=' ';
                        keytemp[j]=' ';
                    }
                }
                k=0;
                s1=s2="";
                jta2.setText(""); //for again encrypt key press
                key=jtf1.getText().toUpperCase();
                s1=jta3.getText().toUpperCase();
                if(s1.length()<key.length()){
                    JOptionPane.showMessageDialog(null, "Key should be smaller than text.","ERROR", JOptionPane.ERROR_MESSAGE);
                }
                else{
                row=(s1.length() / key.length());
                if(s1.length() % key.length() !=0)
                    row++;
                column=key.length();
                arr=new char[row][column];
                keya=key.toCharArray();
                for( i=0;i<column;i++)
                {
                 for( j=0;j<row;j++)
                 {
                  if(k<s1.length())
                     {
                         arr[j][i]=s1.charAt(k);
                         k++;
                     }
                 else
                    {
                        arr[j][i]=' ';
                    }
                 }
                }
                keytemp=key.toCharArray();
                for( i=0;i<column-1;i++){
                    for( j=i+1;j<column;j++){
                        if(keytemp[i]>keytemp[j]){
                            char temp=keytemp[i];
                            keytemp[i]=keytemp[j];
                            keytemp[j]=temp;
                        }
                    }
                }
                decrypt=new char[row][column];
                for(i=0;i<column;i++)
                 {
                    for(j=0;j<column;j++)
                     {
                        if(keya[j]==keytemp[i])
                         {
                            for(k=0;k<row;k++)
                            {
                                decrypt[k][j]=arr[k][i];
                            }
                            keya[j]='?';
                            break;  //---------------------------------------------------------------------
                         }
                        //break;
                     }
                 }
                for(i=0;i<row;i++)
                {
                    for(j=0;j<column;j++)
                    {
                        //System.out.print(arr[i][j]);
                        b=jta2.getText();
                        jta2.setText(b+""+decrypt[i][j]);
                    }
                }
                }
            }
        }
        else if(rabn==true){
            if(jtf1.getText().equalsIgnoreCase("")){
               JOptionPane.showMessageDialog(null, "Enter the Key first.","ERROR", JOptionPane.ERROR_MESSAGE); 
            }
            else{
                k=0;
                s1=s2="";
                jta2.setText(""); //for again encrypt key press
                key=jtf1.getText().toUpperCase();
                s1=jta3.getText().toUpperCase();
                if(s1.length()<key.length()){
                    JOptionPane.showMessageDialog(null, "Key should be smaller than text.","ERROR", JOptionPane.ERROR_MESSAGE);
                }
                else{
                row=(s1.length() / key.length());
                if(s1.length() % key.length() !=0)
                    row++;
                column=key.length();
                arr=new char[row][column];
                keya=key.toCharArray();
                ky=(int) (keya[0]-64);
                if(ky==26){
                    ky=ky-1;
                }
                x=y=0;
                len=s1.length();
                int arry[]=new int[len];
                for(i=0;i<len;i++){
                    arry[i]=(int)s1.charAt(i);
                    if(s1.charAt(i)==' '){
                        s2=s2+s1.charAt(i);
                    }
                    else if(arry[i]>=65 && arry[i]<=91){
                     x=cs.indexOf(s1.charAt(i));
                     y=(x+(26-ky))%26;
                     s2=s2+cs.charAt(y);
                    }
                    else{
                     s2=s2+s1.charAt(i);
                    }
                }
                
                s1=s2;
                s2="";
                for(i=0;i<column;i++)
                {
                 for(j=0;j<row;j++)
                 {
                  if(k<s1.length())
                     {
                         arr[j][i]=s1.charAt(k);
                         k++;
                     }
                 else
                    {
                        arr[j][i]=' ';
                    }
                 }
                }
                keytemp=key.toCharArray();
                for(i=0;i<column-1;i++){
                    for(j=i+1;j<column;j++){
                        if(keytemp[i]>keytemp[j]){
                            char temp=keytemp[i];
                            keytemp[i]=keytemp[j];
                            keytemp[j]=temp;
                        }
                    }
                }
                decrypt=new char[row][column];
                for(i=0;i<column;i++)
                 {
                    for(j=0;j<column;j++)
                     {
                        if(keya[j]==keytemp[i])
                         {
                            for(k=0;k<row;k++)
                            {
                                decrypt[k][j]=arr[k][i];
                            }
                            keya[j]='?';
                            break;  
                         }
                        //break;
                     }
                 }
                for(i=0;i<row;i++)
                {
                    for(j=0;j<column;j++)
                    {
                        s2=s2+decrypt[i][j];
                    }
                }
                jta2.setText(s2);
            }
         }
        }
        else if(hc==true){
            int[][] dkeymatrix,dplainmatrix,dnewmatrix,dciphermatrix,cofactor,adj,invert,product,invertkey;
                s1=s2="";
                jta2.setText("");
                key=jtf1.getText().toUpperCase();
                s1=jta3.getText().toUpperCase();
                //System.out.println(s1);
                len=s1.length();
                //System.out.println(len);
                k=0;
                //int re1=1;
                if(key.length()>9 || key.length()<2){
                    JOptionPane.showMessageDialog(null, "Key should be in between 2 to 9 characters.","ERROR", JOptionPane.ERROR_MESSAGE);
                }
                else{
                    //-------------------------------------------------------------------------------------------------------------------------------------   
                    if(key.length()>=2 && key.length()<=4)
		{			
			row = 2;
			column = 2;
		}
		else if(key.length()>=5 && key.length()<=9)
		{			
			row = 3;
			column = 3;
		}
		
//Matrix for key-----------------------------------------------------------------------------------------------------		
		keymatrix = new int[row][column];
                k=0;
                int re1=1;
		 for(i=0 ; i<row ; i++)
		 {
			 for(j=0 ; j<column ; j++)
			 {				
				 if(k<key.length())
				 {
					 keymatrix[i][j] = hcs.indexOf(key.charAt(k));
					 k++;
				 }
				 else 
				 {
					 
					 keymatrix[i][j] =  re1;
					 re1++;
				 }
			 }
		 }
		 
		 
//plain matrix -----------------------------------------------------------------------------------------------------------------------------------		 
		
		 for(i=0 ; len%row != 0 ; i++)
			{
				len++;
				
			}
			col = len/row;
			
			//acol=3;
			k=0;
				 plainmatrix = new int[row][col]; 
				 
				 for(i=0 ; i<row ; i++)
				 {
					 for(j=0 ; j<col ; j++)
					 {				
						 if(k<s1.length())
						 {
											
							 {
								 plainmatrix[i][j] = hcs.indexOf(s1.charAt(k));
								 k++;
							 }
								 	 
						 }
						 else 
						 {							 
							 plainmatrix[i][j] = 0;
						 }
					 }
				 }
                           
				
		
//Determenant--------------------------------------------------------------------------------------------------------------------------------------
		 if(row==2 && column==2)
		 {
			 det=( keymatrix[0][0] * keymatrix[1][1] ) - ( keymatrix[1][0] * keymatrix[0][1] );
		 }
		 else if(row==3 && column==3)
		 {
			 det=( keymatrix[0][0] * ( (keymatrix[1][1] * keymatrix[2][2]) - (keymatrix[2][1] * keymatrix[1][2]) ) ) - ( keymatrix[0][1] * ( (keymatrix[1][0] * keymatrix[2][2]) - (keymatrix[2][0] * keymatrix[1][2]) ) ) + ( keymatrix[0][2] * ( (keymatrix[1][0] * keymatrix[2][1]) - (keymatrix[2][0] * keymatrix[1][1]) ) );
		 }
		 int g=det;
		 
//Inverse Determenant------------------------------------------------------------------------------------------------------------------------------		 
		 dinv=1;
		for(i=1 ; i<42 ; i++)
		{
			sum = 0;
			if(det<0)
			{
				sum = det * -dinv;
				sum = sum % 41;
				dinv++;
			}	
			else
			{
				sum = det * dinv;
				sum = sum % 41;
				dinv++;
			}
			if(sum == 1)
				break;
		}		
		if(det<0){
		dinv=-i;}
		else{
			dinv=i;}
//cofactor------------------------------------------------------------------------------------------------------------------------------------		

		cofactor = new int[row][column];
		if(row==3 && column==3)
		{
					cofactor = new int[row][column];
					cofactor[0][0] = ( (keymatrix[1][1] * keymatrix[2][2]) - (keymatrix[2][1] * keymatrix[1][2]) );
					cofactor[0][1] = -( (keymatrix[1][0] * keymatrix[2][2]) - (keymatrix[2][0] * keymatrix[1][2]) );
					cofactor[0][2] = ( (keymatrix[1][0] * keymatrix[2][1]) - (keymatrix[2][0] * keymatrix[1][1]) );
					cofactor[1][0] = -( (keymatrix[0][1] * keymatrix[2][2]) - (keymatrix[0][2] * keymatrix[2][1]) );
					cofactor[1][1] = ( (keymatrix[0][0] * keymatrix[2][2]) - (keymatrix[0][2] * keymatrix[2][0]) );
					cofactor[1][2] = -( (keymatrix[0][0] * keymatrix[2][1]) - (keymatrix[2][0] * keymatrix[0][1]) );
					cofactor[2][0] = ( (keymatrix[0][1] * keymatrix[1][2]) - (keymatrix[0][2] * keymatrix[1][1]) );
					cofactor[2][1] = -( (keymatrix[0][0] * keymatrix[1][2]) - (keymatrix[1][0] * keymatrix[0][2]) );
					cofactor[2][2] = ( (keymatrix[0][0] * keymatrix[1][1]) - (keymatrix[1][0] * keymatrix[0][1]) );
		}
		else if(row==2 && column==2)
		{
			for(i=0 ; i<row ; i++)
			{
				for(j=0 ; j<column ; j++)
				{
					cofactor[i][j] = keymatrix[i][j];
				}
			}
			int temp = cofactor[0][0];
			cofactor[0][0] = cofactor[1][1];
			cofactor[1][1] = temp;
			
			temp = cofactor[1][0];
			cofactor[1][0] = cofactor[0][1];
			cofactor[0][1] = temp;
			
                        cofactor[0][1] = -cofactor[0][1];
			cofactor[1][0] = -cofactor[1][0];
			
			}
		 
		 
		 
//Adjucate----------------------------------------------------------------------------------------------------------------------------
	adj = new int[row][column];	 
	
	if(row == 2 && column==2)
	 {
		 for(i=0 ; i<row ; i++)
			{
				for(j=0 ; j<column ; j++)
				{
					adj[j][i] = cofactor[i][j];
				}
			}
	 }	 
	
		 if(row == 3 && column==3)
		 {
			 for(i=0 ; i<row ; i++)
				{
					for(j=0 ; j<column ; j++)
					{
						adj[j][i] = cofactor[i][j];
					}
				}		 	
		 }
		 
//Adjucate mod 41	
		 p1=1;
		 invert = new int[row][column];
		 for(i=0 ; i<row ; i++)
		 {
			 for(j=0 ; j<column ; j++)
			 {
				 if(adj[i][j] < 0) 
					{						 									
					 	do{
					 		h=0;
					 		h = 41 * p1;
					 		p1++;
					 	  }while(h < Math.abs(adj[i][j]));
					 		p1=1;			
					 		if(h > Math.abs(adj[i][j]))
					 			{
					 				invert[i][j] = (h + adj[i][j]) % 41;
					 			}					 							 	
					}
				 
				 if(adj[i][j] > 0)
				 {
					 invert[i][j] = adj[i][j] % 41;
				 }				 
			 }
		 }
		 
		 
//Invert-------------------------------------------------------------------------------------------------------------------------
		 product = new int[row][column];
		 
		 for(i=0 ; i<row ; i++)
		 {
			 for(j=0 ; j<column ; j++)
			 {
				 product[i][j] = dinv * invert[i][j];
			 }
		 }
		 
		 
//product % 41---------------------------------------------------------------------------------------------------------------------------		 
		p1=1;
		 invertkey = new int[row][column];
		 for(i=0 ; i<row ; i++)
		 {
			 for(j=0 ; j<column ; j++)
			 {
				 if(product[i][j] < 0) 
					{						 									
					 	do{
					 		h=0;
					 		h = 41 * p1;
					 		p1++;
					 	  }while(h < Math.abs(product[i][j]));
					 	p1=1;
					 					
					 		if(h > Math.abs(product[i][j]))
					 			{
					 				invertkey[i][j] = (h + product[i][j]) % 41;
					 			}					 							 	
					}
				 
				 if(product[i][j] > 0)
				 {
					 invertkey[i][j] = product[i][j] % 41;
				 }				 
			 }
		 }
		
		 
				
		

		 
		 
	////-product of invert key and cipher matrix------------------------------------------------------------	 
		 
                sum=0;
		 newmatrix = new int[row][col];
		 for(i=0 ; i<row ; i++)
		 {
			 for(j=0 ; j<col; j++)
			 {
				 for(z=0 ; z<row ; z++)
				 {
					sum = sum + invertkey[i][z] * plainmatrix[z][j];
				 }
				 newmatrix[i][j] = sum;
				 sum=0;
			 }
		 }
		 
		 
	
		 
//matrix of cipher text (int)--------------------------------------------------------------------------		 
	

		 ciphermatrix = new int[row][col];
	
	for(i=0 ; i<row ; i++)
	{
		for(j=0 ; j<col ; j++)
		{
			ciphermatrix[i][j] = newmatrix[i][j] % 41;
		}
	}
	
	
	for(i=0 ; i<row ; i++)
	{
		for(j=0 ; j<col ; j++)
		{
		
		}
	}
	
	s1 = "";
	for(i=0 ; i<row ; i++)
	{
		for(j=0 ; j<col ; j++)
		{
		  s1 = s1+ hcs.charAt(ciphermatrix[i][j]);
			
		}
	}
	
        jta2.setText(s1);
                    
                }
        }
        else if(rsa==true){
            if(jtf2.getText().equalsIgnoreCase("") || jtf3.getText().equalsIgnoreCase("")){
               JOptionPane.showMessageDialog(null, "Generate the key pair and enter the keys.","ERROR", JOptionPane.ERROR_MESSAGE); 
            }
            else{
                s1=s2="";
                e1=n1=0;
                jta2.setText("");
                key=jtf2.getText();
                e1=Integer.parseInt(key);
                //System.out.println(e1);
                key=jtf3.getText();
                n1=Integer.parseInt(key);
                //System.out.println(n1);
                k=0;
                s1=jta3.getText();
                for(i=0;i<s1.length();i++){
                    if(s1.charAt(i)=='|'||s1.charAt(i)=='?'||s1.charAt(i)==':'||s1.charAt(i)=='/'){
                        k++;
                    }
                }
                //System.out.println(k);
                String s3[]= new String[k];
                for(i=0;i<k;i++){
                    s3[i]="";
                }
                //System.out.print("\n");
                for(i=0,j=0;i<s1.length();i++){
                if((((s1.charAt(i) != '?') && (s1.charAt(i) != '|')) && (s1.charAt(i) != ':'))   &&  (s1.charAt(i)!='/')){
                    s3[j]=s3[j]+s1.charAt(i);
                    //System.out.print(s3[j]+ "  ");
                }
                else{
                    j++;
                }
                }
                BigInteger e2=new BigInteger(String.valueOf(e1));
                BigInteger n2=new BigInteger(String.valueOf(n1));
                int[] fi=new int[s3.length];
                //System.out.print("\n");
                for(i=0;i<s3.length;i++){
                    int o=Integer.parseInt(s3[i]);
                    //BigInteger a = BigInteger.valueOf(x.intValue);
                    BigInteger test = new BigInteger(String.valueOf(o));
                    //System.out.println("BG : "+test);
                    test=test.modPow(e2, n2);
                    //System.out.println("BG final : "+test);
                    s2=s2+test;
                    //System.out.println("String : "+s4);
                    fi[i]=Integer.parseInt(s2);
                    //System.out.println("Fi : "+fi[i]);
                    s2="";
                    test=BigInteger.valueOf(0);
                    //System.out.println("test : "+test);
                }
                s2="";
                for(i=0;i<fi.length;i++){
                    s2=s2+rsc.charAt(fi[i]);
                }     
                jta2.setText(s2);
            }
        }
        else if(rf==true){
            ky=Integer.parseInt(jtf1.getText());
            if(ky>4){
               JOptionPane.showMessageDialog(null, "Key should be less than 5.","ERROR", JOptionPane.ERROR_MESSAGE); 
            }
            else{
                int temp,spaces,shift=0,itr,p=0;
                char arr[];
                s1=jta3.getText();
                jta2.setText("");
                temp=s1.length()-ky;
                arr=new char[ky-1];
                if((temp/(ky-1))%2==0)
                  arr[0]=(char) (1+(temp/(ky-1))/2);
                else
                  arr[0]=(char) (1+((temp/(ky-1))+1)/2);
                arr[1]=(char) (arr[0]*2-2);
                for(i=2;i<ky-1;i++)
                 arr[i]=arr[1];
                //--------------------------------------------------------------------------------------------------------------------------------
                int ptr[]=new int[arr.length+1];
                int p1=0,p2=0,p3=0,c=1;
                boolean chk=true;
                //System.out.print(s1.charAt(ptr[p3]+p1));
                b=jta2.getText();
                jta2.setText(b+s1.charAt(ptr[p3]+p1));
                ptr[p3]++;
                while(c<s1.length())
                 {
                    if(chk)
                     {
                        p1+=arr[p2];
                        p2++;
                        p3++;
                     }
                    else
                     {
                        p1-=arr[p2];
                        p2--;
                        p3--;
                     }
                    //System.out.print(s1.charAt(ptr[p3]+p1));
                    b=jta2.getText();
                    jta2.setText(b+s1.charAt(ptr[p3]+p1));
                    c++;
                    ptr[p3]++;
                    if(p2==arr.length)
                     {
                        p2--;
                        chk=false;
                     }
                    else if(p2==-1)
                     {
                        p2++;
                        chk=true;
                     }
                 }                
            }
        }
    }//GEN-LAST:event_jb16ActionPerformed

    private void jb17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb17ActionPerformed
        // TODO add your handling code here:
        
        //vc.pdf----------------------------------------------------------------
        
        vcorg v=new vcorg();
        v.setVisible(true);
    }//GEN-LAST:event_jb17ActionPerformed

    private void jtp1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtp1MouseEntered
        // TODO add your handling code here:
        setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_jtp1MouseEntered

    private void jtp2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtp2MouseEntered
        // TODO add your handling code here:
        setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_jtp2MouseEntered

    private void jb14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb14ActionPerformed
        // TODO add your handling code here:
        SecureRandom r = new SecureRandom();
        p = new BigInteger(6, 100, r);
        q = new BigInteger(6, 100, r);
        if(p.compareTo(q)==0){
            q=new BigInteger(6,100,r);
        }
        n = p.multiply(q);
        BigInteger m = (p.subtract(BigInteger.ONE)).multiply(q.subtract(BigInteger.ONE));
        e = new BigInteger("3");
        while (m.gcd(e).intValue()> 1) {
            e = e.add(new BigInteger("2"));
        }
        d = e.modInverse(m);
        jtf2.setText(e.toString());
        jtf3.setText(n.toString());
        JOptionPane.showMessageDialog(null, "Public Key = ("+e+","+n+")\nPrivate Key = ("+d+","+n+")","Note the KEYS",JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_jb14ActionPerformed

    private void jb18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb18ActionPerformed
        // TODO add your handling code here:
        rf r1=new rf();
        r1.setVisible(true);
    }//GEN-LAST:event_jb18ActionPerformed

    private void jb19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb19ActionPerformed
        // TODO add your handling code here:
         
        try{
            JOptionPane.showMessageDialog(null, "Can only open .txt files.", "NOTE", JOptionPane.INFORMATION_MESSAGE);
            JFileChooser chooser=new JFileChooser();
            FileNameExtensionFilter docfilter=new FileNameExtensionFilter("WORD files", "txt");
            chooser.setFileFilter(docfilter);
            int value = chooser.showOpenDialog(null);
            if(value == JFileChooser.APPROVE_OPTION){
                File f=chooser.getSelectedFile();
                String filename = f.getAbsolutePath();
                FileReader reader = new FileReader(filename);
                BufferedReader br = new BufferedReader(reader);
                if(ac==true){
                 jta3.read(br, null);
                 br.close();
                 jta3.requestFocus();   
                }
                else{
                 jta1.read(br, null);
                 br.close();
                 jta1.requestFocus();   
                }   
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jb19ActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mycryptool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mycryptool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mycryptool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mycryptool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new mycryptool().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    public javax.swing.JButton jb1;
    public javax.swing.JButton jb10;
    public javax.swing.JButton jb11;
    public javax.swing.JButton jb12;
    public javax.swing.JButton jb13;
    public javax.swing.JButton jb14;
    public javax.swing.JButton jb15;
    public javax.swing.JButton jb16;
    public javax.swing.JButton jb17;
    public javax.swing.JButton jb18;
    public javax.swing.JButton jb19;
    public javax.swing.JButton jb2;
    public javax.swing.JButton jb3;
    public javax.swing.JButton jb4;
    public javax.swing.JButton jb5;
    public javax.swing.JButton jb6;
    public javax.swing.JButton jb7;
    public javax.swing.JButton jb8;
    public javax.swing.JButton jb9;
    public javax.swing.JLabel jl2;
    public javax.swing.JLabel jl3;
    public javax.swing.JLabel jl4;
    public javax.swing.JLabel jl5;
    public javax.swing.JLabel jl6;
    public javax.swing.JLabel jl7;
    public javax.swing.JPanel jp1;
    public javax.swing.JPanel jp2;
    public javax.swing.JPanel jp3;
    public javax.swing.JPanel jp4;
    public javax.swing.JScrollPane jsp1;
    public javax.swing.JScrollPane jsp2;
    public javax.swing.JScrollPane jsp3;
    public javax.swing.JScrollPane jsp4;
    public javax.swing.JScrollPane jsp5;
    public javax.swing.JTree jt1;
    public javax.swing.JTextArea jta1;
    public javax.swing.JTextArea jta2;
    public javax.swing.JTextArea jta3;
    public javax.swing.JTextArea jta4;
    public javax.swing.JTextField jtf1;
    public javax.swing.JTextField jtf2;
    public javax.swing.JTextField jtf3;
    public javax.swing.JTabbedPane jtp1;
    public javax.swing.JTabbedPane jtp2;
    // End of variables declaration//GEN-END:variables
}